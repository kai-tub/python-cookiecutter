[project]
name = "{{cookiecutter.__project_slug}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_short_description}}"
authors = [
    {name = "{{cookiecutter.full_name}}", email= "{{cookiecutter.email}}"},
]
license = {text = "{{cookiecutter.open_source_license}}"}
readme = "README.md"
#- Uses the < syntax instead of <= because conda-forge does not work correctly with <=
# deps-start
requires-python = "{PYTHON_VERSIONS_HOOK}"
dependencies = [

]
# deps-end

[project.urls]
homepage = "{{cookiecutter.__github_url}}"
repository = "{{cookiecutter.__github_url}}"
{%- if cookiecutter.use_github_pages == 'y' %}
documentation = "https://{{cookiecutter.github_username}}.github.io/{{cookiecutter.github_repo}}"
{%- endif %}

[build-system]
requires = ["pdm-pep517>=1.0.0"]
build-backend = "pdm.pep517.api"

[tool.pdm.build]
includes = ["LICENSE"]

[tool.pdm.dev-dependencies]
docs = [
    "myst-nb>=0.16",
    "Sphinx>=4.5",
    "sphinx-autobuild",
    "sphinx-external-toc",
    "linkify-it-py",
    "furo",
]
test = [
    "pytest",
    "pre-commit",
    "jupyter",
    "notebook",
]
lint = [
    "black[jupyter]",
    "isort",
    "nbstripout",
{%- if cookiecutter.use_mypy == 'y' %}
    "mypy",
{%- endif %}
]

{%- if cookiecutter.use_mypy == 'y' %}
[tool.mypy]
exclude = ["tests"]
# common plugins:
# plugins = "numpy.typing.mypy_plugin"
{%- endif %}

[tool.isort]
profile = "black"

{#- TODO: Maybe also install ipykernel by default #}
{#- {{env-cmd}} python -m ipykernel install --user --name {{env-name}} #}
[tool.pdm.scripts]
pre-commit = "pre-commit run --all-files"
{#- FUTURE: Maybe add recursive nbstripout command? #}
{% if cookiecutter.use_mypy != 'y' %}# {% endif -%} check-types = "mypy src"

lint.composite = [
    "pre-commit",
    {% if cookiecutter.use_mypy != 'y' %}# {% endif -%} "check-types",
]
lint.help = "Will check if all files are formatted with black & isort"

build-docs.cmd = "sphinx-build docs docs/_build/"
build-docs.help = "Build Sphinx documentation"
serve-sphinx-docs.cmd = "sphinx-autobuild docs docs/_build --open-browser"
serve-sphinx-docs.help = "Serve the Sphinx documentation with sphinx-autobuild"

tests = "pytest tests/"
# If coverage is desired:
# tests = "coverage run --parallel --source {{cookiecutter.__package_name}} -m pytest tests"
# coverage_report.composite = [
#     "coverage combine",
#     "coverage report --fail-under 95",
# ]
# coverage_html_report = "coverage html"
# coverage_html.composite = [
#     "tests",
#     "coverage_html_report"
# ]
# coverage_html.help = "Run the coverage with pytest and produce the html"
